import 'dart:io';
import 'dart:math';
import 'package:grinder/grinder.dart';
import 'package:path/path.dart' as pathPackage;
import 'package:yaml/yaml.dart';


Future _forEachBenchmark(String path, void preProcess(String), void postProcess(String, ProcessResult)) async {
  var benchmarks = await new Directory(pathPackage.join('benchmark', path)).listSync();
  var first = true;
  for (var file in benchmarks) {
    if (file is File && pathPackage.extension(file.path) == ".dart") {
      String fileName = pathPackage.basename(file.path);
      String name = pathPackage.basenameWithoutExtension(fileName);
      
      preProcess(name);
      ProcessResult results = await Process.run('dart', [pathPackage.join('benchmark', path, fileName)]);
      postProcess(name, results);
    }
  }
}


Future runBenchmarks() async {
  await _runCMBenchmarks();
  log('');
  await _runM4DBenchmarks();
}

Future _runCMBenchmarks() async {
  log('Running compiled_mustache benchmarks...');
  var first = true;
  await _forEachBenchmark('', (String name) {
    if (!first) { log('\n'); }
    first = false;
    log('> $name');
  }, (String name, ProcessResult pr) {
    log(pr.stdout);
  });
}

Future _runM4DBenchmarks() async {
  log('Running mustache4dart benchmarks...');
  var first = true;
  await _forEachBenchmark('mustache4dart_comparison', (String name) {
    if (!first) { log('\n'); }
    first = false;
    log('> $name');
  }, (String name, ProcessResult pr) {
    log(pr.stdout);
  });
}

String _repeatStr(String s, int times) {
  String o = '';
  for (var i = 0; i < times; i++) {
    o += s;
  }
  return o;
}

String _parseTime(String s, int ensurePlaces) {
  var trimmed = s.substring(0, s.length-4); // remove ' us.' from end
  var dotIndex = trimmed.indexOf('.');
  if (dotIndex == -1) {
    return trimmed + '.' + _repeatStr('0', ensurePlaces);
  }
  
  var fromEnd = trimmed.length - dotIndex - 1;
  if (fromEnd > ensurePlaces) {
    return trimmed.substring(0, trimmed.length - (fromEnd - ensurePlaces));
  } else if (fromEnd < ensurePlaces) {
    return trimmed + _repeatStr('0', ensurePlaces - fromEnd);
  }
  
  return trimmed;
}

Future documentBenchmarks() async {
  log('\nGenerating benchmarks.md...');
  // Document benchmark results
  Map<String, Map<String, String>> compiled_mustache_results = {};
  Map<String, Map<String, String>> mustache4dart_results = {};
  
  Map<String, String> processOutput (String o) {
    var trimmed = o;
    
    //remove trailing newlines
    while (trimmed[trimmed.length-1] == '\n') {
      trimmed = trimmed.substring(0, trimmed.length-1);
    }
    
    Map<String, String> tests = {};
    for (var l in trimmed.split('\n')) {
      var parts = l.split('(RunTime): ');
      tests[parts[0]] = _parseTime(parts[1], 8);
    }
    
    return tests;
  }
  
  
  
  log('  Running compiled_mustache benchmarks...');
  await _forEachBenchmark('', (String name) {
    log('    $name');
  }, (String name, ProcessResult pr) {
    compiled_mustache_results[name] = processOutput(pr.stdout.toString());
  });
  
  log('  Running mustache4dart benchmarks...');
  await _forEachBenchmark('mustache4dart_comparison', (String name) {
    log('    $name');
  }, (String name, ProcessResult pr) {
    mustache4dart_results[name] = processOutput(pr.stdout.toString());
  });
  
  // Generate docs
  await _documentCompiledMustache(compiled_mustache_results);
  await _documentMustache4Dart(mustache4dart_results);
  await _documentComparison(compiled_mustache_results, mustache4dart_results);
}

Future _documentCompiledMustache(Map<String, Map<String, String>> results) async {
  YamlNode pubspec = loadYaml((await new File('pubspec.yaml')).readAsStringSync());
  var cmver = pubspec['version'];
  String contents =
    '<!-- THIS FILE IS AUTOGENERATED BY \'grind doc\'; DO NOT MODIFY -->\n\n'
    'Benchmarks for compiled_mustache v$cmver\n'
    '========================================\n';
  
  for (var n in results.keys) {
    var suite = results[n];
    
    contents += '\n\n## $n\n';
    contents += '|Name|Time (in μs)|\n';
    contents += '|----|-----------:|'; //don't end with newline because the loop below takes care of that
    
    for (var k in suite.keys) {
      contents += '\n|$k|`${suite[k]}`|';
    }
  }
  
  await _writeToDocFile('compiled_mustache', contents);
}

Future _documentMustache4Dart(Map<String, Map<String, String>> results) async {
  YamlNode pubspecLock = loadYaml((await new File('pubspec.lock')).readAsStringSync());
  var m4dver = pubspecLock['packages']['mustache4dart']['version'];
  String contents =
    '<!-- THIS FILE IS AUTOGENERATED BY \'grind doc\'; DO NOT MODIFY -->\n\n'
    'Benchmarks for mustache4dart v$m4dver\n'
    '=====================================\n';
  
  for (var n in results.keys) {
    var suite = results[n];
    
    contents += '\n\n## $n\n';
    contents += '|Name|Time (in μs)|\n';
    contents += '|----|-----------:|'; //don't end with newline because the loop below takes care of that
    
    for (var k in suite.keys) {
      contents += '\n|$k|`${suite[k]}`|';
    }
  }
  
  await _writeToDocFile('mustache4dart', contents);
}

Future _documentComparison(Map<String, Map<String, String>> compiled_mustache_results, Map<String, Map<String, String>> mustache4dart_results) async {
  YamlNode pubspec = loadYaml((await new File('pubspec.yaml')).readAsStringSync());
  var cmver = pubspec['version'];
  YamlNode pubspecLock = loadYaml((await new File('pubspec.lock')).readAsStringSync());
  var m4dver = pubspecLock['packages']['mustache4dart']['version'];
  
  String contents =
    '<!-- THIS FILE IS AUTOGENERATED BY \'grind doc\'; DO NOT MODIFY -->\n\n'
    'Comparison of compiled_mustache v$cmver and mustache4dart v$m4dver\n'
    '==================================================================\n';
  
  var comparisons = {
    'compileAndRender': 'render',
    'compileAndRenderWithPartialProvider': 'renderWithPartialProvider',
    'render': 'render',
    'renderWithPartialProvider': 'renderWithPartialProvider'
  };
  
  var minDiff = double.MAX_FINITE;
  var maxDiff = 0;
  
  for (var n in comparisons.keys) {
    var cmSuite = compiled_mustache_results[n];
    var m4dSuite = mustache4dart_results[comparisons[n]];
    
    contents += '\n\n## $n vs ${comparisons[n]}\n';
    contents += '|Name|compiled_mustache time (in μs)|mustache4dart time (in μs)|Difference factor|\n';
    contents += '|----|-----------------------------:|-------------------------:|----------------:|'; //don't end with newline because the loop below takes care of that
    
    for (var k in cmSuite.keys) {
      var diff = double.parse(m4dSuite[k])/double.parse(cmSuite[k]);
      if (diff < minDiff) {
        minDiff = diff;
      }
      if (diff > maxDiff) {
        maxDiff = diff;
      }
      var formattedDiff = _parseTime('$diff', 3);
      contents += '\n|$k|`${cmSuite[k]}`|`${m4dSuite[k]}`|`${formattedDiff}x`|';
    }
  }
  
  await _writeToDocFile('comparison', contents);
  await _updateReadme(_parseTime('$minDiff', 3), _parseTime('$maxDiff', 3));
}

Future _writeToDocFile(String name, String contents) async {
  var file = await new File('doc/benchmarks/$name.md');
  if (!file.existsSync()) {
    file.createSync(recursive: true);
  }
  file.writeAsString(contents);
}

Future _updateReadme(String minDiff, String maxdiff) async {
  var file = await new File('README.md');
  if (!file.existsSync()) {
    return;
  }
  String contents = file.readAsStringSync();
  contents = contents.replaceFirst(new RegExp(r'\[\d+\.\d+-\d+\.\d+x faster\]\(doc\/benchmarks\/comparison\.md\)'), '[$minDiff-${maxdiff}x faster](doc/benchmarks/comparison.md)');
  file.writeAsString(contents);
}